#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub enum SensorType {
    Temperature = 0x00,
    Voltage = 0x01,
    Current = 0x02,
    Frequency = 0x03,
    Resistance = 0x04,
    Power = 0x05,
    Mass = 0x06,
    Length = 0x07,
    Area = 0x08,
    Volume = 0x09,
    Density = 0x0a,
    Velocity = 0x0b,
    Acceleration = 0x0c,
    Force = 0x0d,
    Energy = 0x0e,
    Pressure = 0x0f,
    Time = 0x10,
    Angle = 0x11,
    PositionX = 0x12,
    PositionY = 0x13,
    PositionZ = 0x14,
    AngularVelocity = 0x15,
    LuminousIntensity = 0x16,
    LuminousFlux = 0x17,
    Illuminance = 0x18,
    ChrominanceRed = 0x19,
    ChrominanceGreen = 0x1a,
    ChrominanceBlue = 0x1b,
    Contacts = 0x1c,
    Memory = 0x1d,
    Items = 0x1e,
    Humidity = 0x1f,
    Counter16Bit = 0x20,
    Other = 0x7f,
}

impl From<u8> for SensorType {
    fn from(sensor_type: u8) -> Self {
        match sensor_type {
            0x00 => SensorType::Temperature,
            0x01 => SensorType::Voltage,
            0x02 => SensorType::Current,
            0x03 => SensorType::Frequency,
            0x04 => SensorType::Resistance,
            0x05 => SensorType::Power,
            0x06 => SensorType::Mass,
            0x07 => SensorType::Length,
            0x08 => SensorType::Area,
            0x09 => SensorType::Volume,
            0x0a => SensorType::Density,
            0x0b => SensorType::Velocity,
            0x0c => SensorType::Acceleration,
            0x0d => SensorType::Force,
            0x0e => SensorType::Energy,
            0x0f => SensorType::Pressure,
            0x10 => SensorType::Time,
            0x11 => SensorType::Angle,
            0x12 => SensorType::PositionX,
            0x13 => SensorType::PositionY,
            0x14 => SensorType::PositionZ,
            0x15 => SensorType::AngularVelocity,
            0x16 => SensorType::LuminousIntensity,
            0x17 => SensorType::LuminousFlux,
            0x18 => SensorType::Illuminance,
            0x19 => SensorType::ChrominanceRed,
            0x1a => SensorType::ChrominanceGreen,
            0x1b => SensorType::ChrominanceBlue,
            0x1c => SensorType::Contacts,
            0x1d => SensorType::Memory,
            0x1e => SensorType::Items,
            0x1f => SensorType::Humidity,
            0x20 => SensorType::Counter16Bit,
            0x7f => SensorType::Other,
            _ => panic!("Invalid value for Sensor Type: 0x{:02X?}", sensor_type),
        }
    }
}

#[derive(Clone, Debug, PartialEq, Eq)]
pub struct Sensor {
    pub id: u8,
    pub kind: SensorType,
    pub unit: u8,
    pub prefix: u8,
    pub range_minimum_value: i16,
    pub range_maximum_value: i16,
    pub normal_minimum_value: i16,
    pub normal_maximum_value: i16,
    pub recorded_value_support: u8,
    pub description: String,
}
